- name: Copy file .my.cnf
  template: 
    src: .my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
    owner: prometheus
    group: prometheus
    mode: '0600'
  no_log: True
- name: Copy file prometheus-mysqld-exporter
  copy: 
    src: prometheus-mysqld-exporter
    dest: /etc/default/prometheus-mysqld-exporter
- name: Copy file .my.cnf to /home/backup
  template: 
    src: backup.my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: '0600'
  no_log: True
- name: Install MySQL-server
  apt:
    name: mysql-server
    state: present
- name: Install python3-pymysql
  apt:
    name: python3-pymysql
    state: present
- name: Copy file override.cnf and restart MySQL
  template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify:
    Restart mysql

- name: Flush handlers
  meta: flush_handlers
  
- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
- name: Create MySQL {{ mysql_user }} user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Create MySQL user dedicated for exporter
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_login }}"
    password: "{{ mysql_exporter_password }}"
    host: "localhost"
    priv: "*.*:SELECT,GRANT,REPLICATION CLIENT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true
- name: Install prometheus-mysqld-exporter
  apt:
    name: prometheus-mysqld-exporter
    state: present

- service:
    enabled: true
    name: "{{ item }}"
    state: started
  loop:
    - mysql
    - prometheus-mysqld-exporter

- name: Create a directory if it does not exists /home/backup/mysql
  file:
    path: /home/backup/mysql
    state: 'directory'
    owner: backup
    group: backup

- name: Create MySQL {{ backup_login }} user
  community.mysql.mysql_user:
    name: "{{ backup_login }}"
    password: "{{ backup_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:LOCK TABLES, SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Copy file mysql-backup
  template: 
    src: mysql-backup.j2
    dest: /etc/cron.d/mysql-backup

- name: Create MySQL replication user
  community.mysql.mysql_user:
    name: "{{ mysql_replication_login }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Read-only settings for replica server
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname.replace(machine_name + '-', '') == '1' else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- include_role:
    name: dns_record
  vars:
    dns_record: "mysql{{ inventory_hostname.replace(machine_name, '') }}"